buildscript {
    ext.kotlin_version = '1.2.51'
    ext.junit_version = '4.12'
    ext.slf4j_version = '1.7.25'
    ext.logback_version = '1.2.3'
    ext.kotlin_logging_version = '1.5.4'
    ext.ktlint_version = '0.24.0'
}

plugins {
    id "org.jetbrains.kotlin.jvm" version "1.2.51"
    id "org.jetbrains.dokka" version "0.9.17"
    id "com.github.johnrengelman.shadow" version "2.0.4"
    id "com.diffplug.gradle.spotless" version "3.13.0"
    id "com.github.ben-manes.versions" version "0.20.0"
}

allprojects {
    group = "com.github.kvnxiao"
    version = "0.9.0"

    task wrapper(type: Wrapper) {
        gradleVersion = '4.7'
        distributionUrl = "https://services.gradle.org/distributions/gradle-$gradleVersion-all.zip"
    }
}

subprojects {
    repositories {
        jcenter()
        maven { url = "https://jitpack.io" }
    }

    apply plugin: 'java'
    apply plugin: 'kotlin'
    apply plugin: 'org.jetbrains.dokka'
    apply plugin: 'com.github.johnrengelman.shadow'
    apply plugin: "com.diffplug.gradle.spotless"
    apply plugin: 'com.github.ben-manes.versions'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    dependencies {
        compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
        compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
        compile "org.slf4j:slf4j-api:$slf4j_version"
        compile "io.github.microutils:kotlin-logging:$kotlin_logging_version"
        testImplementation "org.slf4j:slf4j-api:$slf4j_version"
        testImplementation "ch.qos.logback:logback-classic:$logback_version"
        testImplementation "junit:junit:$junit_version"
    }

    compileKotlin {
        kotlinOptions.jvmTarget = "1.8"
    }
    compileTestKotlin {
        kotlinOptions.jvmTarget = "1.8"
    }

    spotless {
        java {
            googleJavaFormat("1.5").aosp()
            trimTrailingWhitespace()
            endWithNewline()
            licenseHeaderFile "${rootProject.projectDir}/LICENSE_HEADER"
        }
        kotlin {
            trimTrailingWhitespace()
            endWithNewline()
            ktlint("$ktlint_version")
            licenseHeaderFile "${rootProject.projectDir}/LICENSE_HEADER"
        }
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }
}